{
	// Place your atcoder ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"package main": {
		"scope": "go",
		"prefix": "pkgm",
		"body": [
			"package main",
			"",
			"func main() {",
			"\t$0",
			"}"
		],
		"description": "package main"
	},

	"atcoder init": {
		"scope": "go",
		"prefix": "init",
		"body": [
			"package main",
			"",
			"import (",
			"\t\"bufio\"",
			"\t\"fmt\"",
			"\t\"io\"",
			"\t\"os\"",
			")",
			"",
			"func run(_r io.Reader, _w io.Writer) {",
			"\tin := bufio.NewReader(_r)",
			"\tout := bufio.NewWriter(_w)",
			"\tdefer out.Flush()",
			"",
			"\tvar ${1:n} ${2:int}"
			"\t$3",
			"\tvar res int",
			"",
			"\tfmt.Fprintln(out, res)",
			"}",
			"",
			"func main() { run(os.Stdin, os.Stdout) }"
		]
	}

	"if err != nil": {
		"scope": "go",
		"prefix": "iferr",
		"body": [
			"if err != nil {",
			"\t${0:return ${1:nil, }${3:err}}",
			"}"
		],
		"description": "if err != nil"
	},

	"fmt.Println": {
		"scope": "go",
		"prefix": "fp",
		"body": [
			"fmt.Println($0)"
		],
		"description": "fmt.Println"
	},

	"fmt.Printf": {
		"scope": "go",
		"prefix": "ff",
		"body": [
			"fmt.Printf(\"$1\", ${2:var})"
		],
		"description": "fmt.Printf"
	},

	"for": {
		"scope": "go",
		"prefix": "for",
		"body": [
			"for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {",
			"\t$0",
			"}"
		],
		"description": "for statement"
	},

	"for range": {
		"scope": "go",
		"prefix": "forrn",
		"body": [
			"for ${1:_, }${2:v} := range ${3:v} {",
			"\t$0",
			"}"
		],
		"description": "for range statement"
	},

	"fmt.Scanf": {
		"scope": "go",
		"prefix": "fs",
		"body": [
			"fmt.Scanf(\"%${1:d}\", &${2:x})"
		],
		"description": "fmt.Scanf"
	},

	"fmt.Fscan": {
		"scope": "go",
		"prefix": "infscan",
		"body": [
			"fmt.Fscan(in, &${2:x})"
		],
		"description": "fmt.Fscan"
	},


	"scan array": {
		"scope": "go",
		"prefix": "arrayscan",
		"body": [
			"for ${1:i} := ${2:0}; $1 < ${3:count}; $1${4:++} {"
			"\tfmt.Scanf(\"%${5:d}\", &${6:val})"
			"\t${7:a} = append($7, $6)"
			"}"
		]
	},

	"sort ascending order": {
		"scope": "go",
		"prefix": "asc_sort",
		"body": [
			"sort.${1:Ints}(${2:slice})"
		]
	},

	"sort descending order": {
		"scope": "go",
		"prefix": "desc_sort",
		"body": [
			"sort.Sort(sort.Reverse(sort.${1:Int}Slice(${2:slice})))"
		]
	},

	"bisect": {
		"scope": "go",
		"prefix": "bisect",
		"body": [
			"sort.Search(len(${1:slice}), func(${2:i} int) bool { return $1[$2] >= ${3:x} })"
		],
		"description": "return the index which satisfies slice[i] >= x first"
	},

	"make array": {
		"scope": "go",
		"prefix": "mkslice",
		"body": [
			"${1:a} := make([]${2:int}, ${3:k})",
			"for ${4:i} := range $1 {",
			"\tfmt.Fscan(in, &$1[$4])",
			"}",
		]
	},
}
